import 'dart:async';
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final List<Map<String, String>> products = [
    {
      'name': 'Watch',
      'brand': 'Rolex',
      'image':
          'https://www.frostnyc.com/cdn/shop/products/RD_1.2_586801d8-4fd4-4953-a226-4cca7ab18fd4_1970x.jpg?v=1677692173',
      'price': '40',
    },
    {
      'name': 'Airpods',
      'brand': 'Apple',
      'image':
          'https://borneostore.co.id/wp-content/uploads/2023/02/Untitled-design-24-3.jpg',
      'price': '333',
    },
    {
      'name': 'Hoodie',
      'brand': 'Puma',
      'image':
          'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTFhhaghb1GJXKinTe1rVvswq-SQxTmNf_jsw&s',
      'price': '50',
    },
  ];

  // Data keranjang
  List<Map<String, dynamic>> cartItems = [];

  void addToCart(Map<String, String> product) {
    setState(() {
      final existingProductIndex = cartItems.indexWhere((item) =>
          item['name'] == product['name'] && item['brand'] == product['brand']);
      if (existingProductIndex >= 0) {
        cartItems[existingProductIndex]['count']++;
      } else {
        cartItems.add({
          'name': product['name'],
          'brand': product['brand'],
          'image': product['image'],
          'price': double.parse(product['price']!),
          'count': 1,
        });
      }
    });

    // Menampilkan pesan
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('${product['name']} added to cart'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home'),
        actions: [
          IconButton(
            icon: Icon(Icons.shopping_cart),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => CartPage(cartItems: cartItems),
                ),
              );
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: GridView.builder(
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 8.0,
            mainAxisSpacing: 8.0,
            childAspectRatio: 0.75,
          ),
          itemCount: products.length,
          itemBuilder: (context, index) {
            final product = products[index];
            return GestureDetector(
              onTap: () {
                addToCart(product);
              },
              child: productCard(
                product['name']!,
                product['brand']!,
                product['image']!,
                product['price']!,
              ),
            );
          },
        ),
      ),
    );
  }

  Widget productCard(String name, String brand, String imageUrl, String price) {
    return Card(
      elevation: 4.0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            child: ClipRRect(
              borderRadius: BorderRadius.vertical(top: Radius.circular(10)),
              child: Image.network(
                imageUrl,
                width: double.infinity,
                fit: BoxFit.cover,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              name,
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 8.0),
            child: Text(
              brand,
              style: TextStyle(fontSize: 14, color: Colors.grey),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              '\$$price',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
        ],
      ),
    );
  }
}

class CartPage extends StatefulWidget {
  final List<Map<String, dynamic>> cartItems;

  CartPage({required this.cartItems});

  @override
  _CartPageState createState() => _CartPageState();
}

class _CartPageState extends State<CartPage> {
  void _showCheckoutMessage(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Check Out'),
          content: Text('Check out berhasil!'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }

  void _updateItemCount(int index, int newCount) {
    setState(() {
      if (newCount <= 0) {
        widget.cartItems.removeAt(index);
      } else {
        widget.cartItems[index]['count'] = newCount;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    double subtotal = widget.cartItems
        .fold(0, (sum, item) => sum + (item['price'] * item['count']));
    double discount = 4.0;
    double deliveryCharge = 2.0;
    double total = subtotal - discount + deliveryCharge;

    return Scaffold(
      appBar: AppBar(
        title: Text('Cart'),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: widget.cartItems.length,
              itemBuilder: (context, index) {
                final item = widget.cartItems[index];
                return ListTile(
                  leading: Image.network(
                    item['image'],
                    width: 50,
                    height: 50,
                    fit: BoxFit.cover,
                  ),
                  title: Text('${item['name']} (${item['brand']})'),
                  subtitle: Text('\$${item['price']}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.remove),
                        onPressed: () {
                          _updateItemCount(index, item['count'] - 1);
                        },
                      ),
                      Text('${item['count']}'),
                      IconButton(
                        icon: Icon(Icons.add),
                        onPressed: () {
                          _updateItemCount(index, item['count'] + 1);
                        },
                      ),
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () {
                          _updateItemCount(index, 0); // Hapus item
                        },
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
          Divider(),
          ListTile(
            title: Text('Subtotal'),
            trailing: Text('\$${subtotal.toStringAsFixed(2)}'),
          ),
          ListTile(
            title: Text('Discount'),
            trailing: Text('-\$${discount.toStringAsFixed(2)}'),
          ),
          ListTile(
            title: Text('Delivery Charges'),
            trailing: Text('\$${deliveryCharge.toStringAsFixed(2)}'),
          ),
          ListTile(
            title: Text('Total'),
            trailing: Text('\$${total.toStringAsFixed(2)}'),
          ),
          ElevatedButton(
            onPressed: () {
              _showCheckoutMessage(
                  context); // Menampilkan pesan check out berhasil
            },
            child: Text('Check Out'),
            style: ElevatedButton.styleFrom(
              minimumSize: Size(double.infinity, 50),
            ),
          ),
        ],
      ),
    );
  }
}
